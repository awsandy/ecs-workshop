#Â File generated by aws2tf see https://github.com/aws-samples/aws2tf
# aws_ecs_task_definition.ecsworkshopnodejsTaskDef2754560E_1:
resource "aws_ecs_task_definition" "ecsworkshopnodejsTaskDef2754560E_1" {
  container_definitions = jsonencode(
    [
      {
        command               = []
        cpu                   = 0
        dnsSearchDomains      = []
        dnsServers            = []
        dockerLabels          = {}
        dockerSecurityOptions = []
        entryPoint            = []
        environment = [
          {
            name  = "REGION"
            value = "eu-west-2"
          },
        ]
        environmentFiles = []
        essential        = true
        extraHosts       = []
        image            = "public.ecr.aws/aws-containers/ecsdemo-nodejs"
        links            = []
        logConfiguration = {
          logDriver = "awslogs"
          options = {
            awslogs-group         = aws_cloudwatch_log_group.ecsworkshop-nodejs-ecsworkshopNodejsF670245F-jnKh4tbV32Iu.name
            awslogs-region        = "eu-west-2"
            awslogs-stream-prefix = "/nodejs-container"
          }
          secretOptions = []
        }
        memoryReservation = 128
        mountPoints       = []
        name              = "nodejs-app"
        portMappings = [
          {
            containerPort = 3000
            hostPort      = 3000
            protocol      = "tcp"
          },
        ]
        secrets        = []
        systemControls = []
        ulimits        = []
        volumesFrom    = []
      },
    ]
  )
  cpu                = "256"
  execution_role_arn = aws_iam_role.r-ecsworkshop-nodejs-TaskDefExecutionRoleB4775C97-MKZMEQBVX71H.arn
  family             = "ecsworkshopnodejsTaskDef2754560E"
  memory             = "512"
  network_mode       = "awsvpc"
  requires_compatibilities = [
    "EC2",
    "FARGATE",
  ]
  tags          = {}
  tags_all      = {}
  task_role_arn = aws_iam_role.r-ecsworkshop-nodejs-TaskDefTaskRole1EDB4A67-3W29BUBBIQ7H.arn
}
